// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models

module.exports = (mongoose, Mongoose) => {
  // This section contains the properties of your model, mapped to your collection's properties.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const schema = Mongoose.Schema(
    {
      repeatEventDays: [String],
      coOrganizerRequests: [String],
      coOrganizerOffers: [String],
      author: { type: Mongoose.Schema.Types.ObjectId, ref: "user"},
      title: String,
      isAttendeeLimited: Boolean,
      address: String,
      location: {
        type: {
          latitude: Number,
          longitude: Number,
          latitudeDelta: Number,
          longitudeDelta: Number,
        },
        default: null,
      },
      date: String,
      startTime: String,
      ages: [String],
      ageRestriction: Boolean,
      attendeeLimit: Number,
      hasPrice: Boolean,
      ticketLink: String,
      activityImage: String,
      price: Number,
      infoLine: String,
      description: String,
      howToFind: String,
      topic: Number,
      howManyGuests: Number,
      repeatEvent: Boolean,
      repeatEventFrequency: String,
      helpForOrganizers: Boolean,
      hasReminderName: Boolean,
      reminderName: String,
      requestCoOrganizers: Boolean,
      coOrganizerGift: String,
      friendsOnly: Boolean,
      nbFriends: Number,
      selectPeople: Boolean,
      allowGuests: Boolean,
      allowPhoneNumberDisplay: Boolean,
      isOnline: Boolean,
      parity: Boolean,
      parityValues: {
        type: {
          male: Number,
          female: Number,
        },
        default: null,
      },
      allowCoOrganiser: Boolean,
      attendees: { type: [{ type: Mongoose.Schema.Types.ObjectId, ref: "user"}], default: [] },
      createdAt: Date,
      updatedAt: Date,
      waitingList: { type: [{ type: Mongoose.Schema.Types.ObjectId, ref: "user"}], default: [] },
      //New
      whatsappLink: String,
      fbPageLink: String,
      fbGroupLink: String,
      meetupLink: String,
      telegramLink: String,
      otherLink: String,

      likes: [String], // array of user_id
      // ?? what is interested?
      interested: { type: Number, default: 0 },
    },
    {
      timestamps: true,
    }
  );

  return mongoose.model("activity", schema, "Activity");
};
