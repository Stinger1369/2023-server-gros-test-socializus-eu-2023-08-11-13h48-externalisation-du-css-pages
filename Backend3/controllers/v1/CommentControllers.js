const { comment } = require("../../models");

//ðŸ‡¬ðŸ‡§Get all comments //ðŸ‡«ðŸ‡·Obtenir tous les commentaires
const getAllComments = async (req, res) => {
  try {
    const comments = await comment.find().populate("user"); //ðŸ‡«ðŸ‡·populate : permet de remplacer les id par les donnÃ©es correspondantes
    return res.status(200).json(comments); //ðŸ‡«ðŸ‡·status : permet de dÃ©finir le code de statut HTTP
  } catch (e) {
    return res.status(404).json({ error: e.message }); //ðŸ‡«ðŸ‡·json : permet de convertir un objet en JSON
  }
};

//ðŸ‡¬ðŸ‡§Get a comment //ðŸ‡«ðŸ‡·Obtenir un commentaire
const getCommentsByActivity = async (req, res) => { //ðŸ‡«ðŸ‡·req : permet de rÃ©cupÃ©rer les donnÃ©es envoyÃ©es par le client
  try {
    const activityId = req.params.id; //ðŸ‡«ðŸ‡·params : permet de rÃ©cupÃ©rer les paramÃ¨tres de la requÃªte
    const foundComments = await comment  //ðŸ‡«ðŸ‡·await : permet d'attendre la fin de l'exÃ©cution d'une fonction asynchrone
      .find({ activity_id: activityId })  //ðŸ‡«ðŸ‡·find : permet de rÃ©cupÃ©rer les donnÃ©es correspondantes
      .populate("user"); //ðŸ‡«ðŸ‡·populate : permet de remplacer les id par les donnÃ©es correspondantes

    return res.status(200).json(foundComments); //ðŸ‡«ðŸ‡·status : permet de dÃ©finir le code de statut HTTP
  } catch (e) {  //ðŸ‡«ðŸ‡·catch : permet de gÃ©rer les erreurs
    return res.status(404).json({ error: e.message });
  }
};

// ðŸ‡¬ðŸ‡§Create a comment // ðŸ‡«ðŸ‡·CrÃ©er un commentaire
const createComment = async (req, res) => {
  try {
    const createdComment = await comment.create(req.body);  //ðŸ‡¬ðŸ‡§create : permet de crÃ©er un document
    return res.status(201).json({
      result: "Successfully created a comment",
      createdComment,
    });
  } catch (e) {
    return res.status(400).json({ error: e.message });
  }
};

//ðŸ‡¬ðŸ‡§Update a comment //ðŸ‡«ðŸ‡·Mettre Ã  jour un commentaire
const updateComment = async (req, res) => { //ðŸ‡«ðŸ‡·req : permet de rÃ©cupÃ©rer les donnÃ©es envoyÃ©es par le client
  const { id } = req.params;
  try {
    const foundComment = await comment.findById(id); //ðŸ‡«ðŸ‡·findById : permet de rÃ©cupÃ©rer un document par son id
    if (!foundComment) {
      return res.status(404).json({ error: `Comment with id ${id} not found` });
    }

    const { comment: bodyComment, user_id, activity_id } = req.body; //ðŸ‡«ðŸ‡·body : permet de rÃ©cupÃ©rer les donnÃ©es envoyÃ©es par le client
    const updatedComment = await comment.findByIdAndUpdate( //ðŸ‡«ðŸ‡·findByIdAndUpdate : permet de mettre Ã  jour un document
      id,
      { comment: bodyComment, user_id, activity_id },
      { new: true }
    );
    return res.status(200).json(updatedComment);
  } catch (e) {
    return res.status(400).json({ error: e.message });
  }
};

//ðŸ‡¬ðŸ‡§Delete a comment //ðŸ‡«ðŸ‡·Supprimer un commentaire
const deleteComment = async (req, res) => {
  try {
    const deletedComment = await comment.findByIdAndDelete(req.params.id);// findByIdAndDelete : permet de supprimer un document par son id

    if (!deletedComment) {
      return res
        .status(404)
        .json({ error: `Comment not found, please try again.` });
    }
    return res.status(200).json(deletedComment);
  } catch (e) {
    return res.status(400).json({ error: e.message });
  }
};

module.exports = {
  getAllComments,
  getCommentsByActivity,
  createComment,
  // updateComment,
  deleteComment,
};
